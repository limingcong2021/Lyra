name: Deploy to Cloudflare Pages

on:
  workflow_dispatch:  # 手动触发
  workflow_call:  # 允许被其他工作流调用

env:
  # 构建临时路径
  DOWNLOAD_RELEASE_TEMP_PATH: ${{ github.workspace }}/modloader-temp
  # HTML 文件名
  MODLOADER_HTML_NORMAL_FILENAME: "dol.html"
  MODLOADER_HTML_POLYFILL_FILENAME: "dol-polyfill.html"
  # Manifest 文件名
  MANIFEST_JSON_NORMAL_FILENAME: "manifest-normal.json"
  MANIFEST_JSON_POLYFILL_FILENAME: "manifest-polyfill.json"
  # Artifact 名称
  UPLOAD_ARTIFACT_NAME: "ModLoader-Artifact"
  # Artifact 压缩包路径
  UPLOAD_ARTIFACT_FILEPATH: ${{ github.workspace }}/Modloader-Artifact.zip

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: DoL-Lyra/Lyra
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建临时目录
        run: |
          mkdir -p "${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}"

      - id: getRelease
        name: 下载 DoL 正常版
        uses: robinraju/release-downloader@v1.12
        with:
          latest: true
          fileName: "DoL-*-Lyra-*-besc-cheat-csd-*.zip"

      - id: getRelease-polyfill
        name: 下载 DoL Polyfill 版
        uses: robinraju/release-downloader@v1.12
        with:
          latest: true
          fileName: "DoL-*-Lyra-*-polyfill-besc-cheat-csd-*.zip"

      - name: 解压下载的文件
        run: |
          echo "下载的 DoL 正常版: ${{ steps.getRelease.outputs.tag_name }}"
          unzip -q ${{ fromJson(steps.getRelease.outputs.downloaded_files)[0] }} -d ${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}
          mv "${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/Degrees of Lewdity.html" "${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/dol.html"

          echo "下载的 DoL Polyfill 版: ${{ steps.getRelease-polyfill.outputs.tag_name }}"
          unzip -qo ${{ fromJson(steps.getRelease-polyfill.outputs.downloaded_files)[0] }} -d ${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}
          mv "${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/Degrees of Lewdity.html" "${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/dol-polyfill.html"

      - name: 构建 PWA 资源
        run: |
          cp -r .github/pwa/* ${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}

      - name: 修改 HTML 文件
        shell: python3 {0}
        run: |
          for html_name, manifest_name in zip(
            ["${{ env.MODLOADER_HTML_NORMAL_FILENAME }}", "${{ env.MODLOADER_HTML_POLYFILL_FILENAME }}"],
            ["${{ env.MANIFEST_JSON_NORMAL_FILENAME }}", "${{ env.MANIFEST_JSON_POLYFILL_FILENAME }}"]
          ):
            with open(f"${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/{html_name}", "r+", encoding="utf-8") as index_html_file:
              index_html = index_html_file.read()
              insert_index = index_html.find('<meta charset="UTF-8" />')
              index_html = index_html[:insert_index] + \
                  f"<link rel=\"manifest\" href=\"{manifest_name}\">\n" + index_html[insert_index:]
              insert_index = index_html.find('<body>\n\t<div id="init-screen">') + 7
              index_html = index_html[:insert_index] + \
                  "    <script>\n" + \
                  "        if (typeof navigator.serviceWorker !== 'undefined') {\n" + \
                  "            navigator.serviceWorker.register('sw.js')\n" + \
                  "        }\n" + \
                  "    </script>\n" + index_html[insert_index:]
              index_html_file.seek(0)
              index_html_file.truncate()
              index_html_file.write(index_html)

      - name: 打包构建产物
        run: |
          7z a ${{ env.UPLOAD_ARTIFACT_FILEPATH }} ${{ env.DOWNLOAD_RELEASE_TEMP_PATH }}/*

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: ${{ env.UPLOAD_ARTIFACT_FILEPATH }}

  deploy-cf-pages:
    runs-on: ubuntu-latest
    needs: build  # 依赖 build job
    steps:
      - uses: actions/checkout@v4
        with:
          repository: DoL-Lyra/Lyra
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}

      - name: 解压构建产物
        run: |
          unzip -q ${{ env.UPLOAD_ARTIFACT_FILEPATH }} -d ./modloader-temp

      - name: 修改 manifest.json 路径
        shell: python3 {0}
        run: |
          import json

          for manifest_name in ["${{ env.MANIFEST_JSON_NORMAL_FILENAME }}", "${{ env.MANIFEST_JSON_POLYFILL_FILENAME }}"]:
            with open(f"./modloader-temp/{manifest_name}", "r+", encoding="utf-8") as manifest_file:
              manifest_json = json.loads(manifest_file.read())
              manifest_json["scope"] = "/${{ github.event.repository.name }}/"
              manifest_json["start_url"] = "/${{ github.event.repository.name }}/"
              manifest_json["shortcuts"][0]["url"] = "/${{ github.event.repository.name }}/"
              manifest_json["icons"][0]["src"] = "/${{ github.event.repository.name }}/icon.png"
              manifest_file.seek(0)
              manifest_file.truncate()
              manifest_file.write(json.dumps(manifest_json, indent=2))

      - name: 部署到 Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          api-token: ${{ secrets.CF_PAGES_API_TOKEN }}  # Cloudflare API Token
          project-name: "degrees-of-lewdity"  # Cloudflare Pages 项目名称
          directory: "./modloader-temp"  # 构建输出目录
          framework: "custom"  # 框架类型（自定义）
          build-command: ""  # 无需额外构建命令

  post-build:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build, deploy-cf-pages]
    steps:
      - name: 清理构建产物
        uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
